/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SingleExperimentJDialog.java
 *
 * Created on Dec 7, 2011, 12:09:42 PM
 */
package jgenfit.calculation;

import jgenfit.SelectFileJDialog;
import jgenfit.SelectFolderJDialog;
import jgenfit.bussines.experiment.SingleExperimentSection;
import jgenfit.bussines.experiment.SingleExperiment;
import jgenfit.events.GenfitEvent;
import jgenfit.events.GenfitEventListener;
import jgenfit.events.GenfitEventType;

/**
 *
 * @author alex
 */
public class SingleExperimentJDialog extends javax.swing.JDialog implements GenfitEventListener {
    public SingleExperiment singleExperiment;
    public GenfitEvent genfitEvent;

    /** Creates new form SingleExperimentJDialog */
    public SingleExperimentJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.genfitEvent = new GenfitEvent(this, GenfitEventType.SINGLE_EXPERIMENT_SAVE);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabelScattering = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTextFieldDescription = new javax.swing.JTextField();
        jTextFieldScatteringCurveFile = new javax.swing.JTextField();
        jTextFieldMinimumQInDataFile = new javax.swing.JTextField();
        jTextFieldFixedRelErrOnTheFirstPoint = new javax.swing.JTextField();
        jTextFieldMaximumDistanceFopCalculation = new javax.swing.JTextField();
        jTextFieldNumberOfQPointsToAverage = new javax.swing.JTextField();
        jTextFieldExponentAlphaOfPowerLaw = new javax.swing.JTextField();
        jTextFieldMaximumQInDataFile = new javax.swing.JTextField();
        jTextFieldNumberOfLinesToSkip = new javax.swing.JTextField();
        jTextFieldScalingFactor = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jComboBackGround = new javax.swing.JComboBox();
        jPanel3 = new javax.swing.JPanel();
        jCheckBoxCollimation = new javax.swing.JCheckBox();
        jTextFieldNumberOPointsForTheConvolution = new javax.swing.JTextField();
        jTextFieldSourceSampleDistance = new javax.swing.JTextField();
        jTextFieldWaveLengthAngs = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jTextFieldRadiusOftheSourceSlit = new javax.swing.JTextField();
        jTextFieldSampleDetectorDistance = new javax.swing.JTextField();
        jTextFieldRadiusOfTheSampleSlit = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jCheckBox_Mouve_Qpoints_in_the_error_bar = new javax.swing.JCheckBox();
        jCheckBoxWavelength_band = new javax.swing.JCheckBox();
        jCheckBoxDetector = new javax.swing.JCheckBox();
        jCheckBoxRadialaverage = new javax.swing.JCheckBox();
        jCheckBoxVertical_Slit = new javax.swing.JCheckBox();
        jCheckBoxHorizontalSlit = new javax.swing.JCheckBox();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jTextFieldSpacialResolutionOfDetector = new javax.swing.JTextField();
        jTextFieldQ1VerticalSlit = new javax.swing.JTextField();
        jTextFieldQ1HorizontalSlit = new javax.swing.JTextField();
        jTextFieldWaveLenghtBandAngs = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jTextFieldQMaxVerticalSlit = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        jTextFieldQmaxHorizontalSlit = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        jTextFieldSamplingForRadialAverage = new javax.swing.JTextField();
        jButtonCancel = new javax.swing.JButton();
        jbuttonOK = new javax.swing.JButton();

        jPanel2.setName("jPanel2"); // NOI18N

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(jgenfit.JGenfitApp.class).getContext().getResourceMap(SingleExperimentJDialog.class);
        jPanel1.setBackground(resourceMap.getColor("jPanel1.background")); // NOI18N
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setName("jPanel1"); // NOI18N

        jLabel1.setFont(jLabel1.getFont().deriveFont((float)10));
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jLabelScattering.setFont(jLabelScattering.getFont().deriveFont((float)10));
        jLabelScattering.setText(resourceMap.getString("jLabelScattering.text")); // NOI18N
        jLabelScattering.setName("jLabelScattering"); // NOI18N

        jLabel3.setFont(jLabel3.getFont().deriveFont((float)10));
        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        jLabel4.setFont(jLabel4.getFont().deriveFont((float)10));
        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        jLabel5.setFont(jLabel5.getFont().deriveFont((float)10));
        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        jLabel6.setFont(jLabel6.getFont().deriveFont((float)10));
        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N

        jLabel7.setFont(jLabel7.getFont().deriveFont((float)10));
        jLabel7.setText(resourceMap.getString("jLabel7.text")); // NOI18N
        jLabel7.setName("jLabel7"); // NOI18N

        jTextFieldDescription.setFont(jTextFieldDescription.getFont().deriveFont((float)10));
        jTextFieldDescription.setText(resourceMap.getString("jTextFieldDescription.text")); // NOI18N
        jTextFieldDescription.setName("jTextFieldDescription"); // NOI18N

        jTextFieldScatteringCurveFile.setFont(jTextFieldScatteringCurveFile.getFont().deriveFont((float)10));
        jTextFieldScatteringCurveFile.setText(resourceMap.getString("jTextFieldScatteringCurveFile.text")); // NOI18N
        jTextFieldScatteringCurveFile.setName("jTextFieldScatteringCurveFile"); // NOI18N

        jTextFieldMinimumQInDataFile.setFont(jTextFieldMinimumQInDataFile.getFont().deriveFont((float)10));
        jTextFieldMinimumQInDataFile.setText(resourceMap.getString("jTextFieldMinimumQInDataFile.text")); // NOI18N
        jTextFieldMinimumQInDataFile.setName("jTextFieldMinimumQInDataFile"); // NOI18N

        jTextFieldFixedRelErrOnTheFirstPoint.setFont(jTextFieldFixedRelErrOnTheFirstPoint.getFont().deriveFont((float)10));
        jTextFieldFixedRelErrOnTheFirstPoint.setText(resourceMap.getString("jTextFieldFixedRelErrOnTheFirstPoint.text")); // NOI18N
        jTextFieldFixedRelErrOnTheFirstPoint.setName("jTextFieldFixedRelErrOnTheFirstPoint"); // NOI18N

        jTextFieldMaximumDistanceFopCalculation.setFont(jTextFieldMaximumDistanceFopCalculation.getFont().deriveFont((float)10));
        jTextFieldMaximumDistanceFopCalculation.setText(resourceMap.getString("jTextFieldMaximumDistanceFopCalculation.text")); // NOI18N
        jTextFieldMaximumDistanceFopCalculation.setName("jTextFieldMaximumDistanceFopCalculation"); // NOI18N

        jTextFieldNumberOfQPointsToAverage.setFont(jTextFieldNumberOfQPointsToAverage.getFont().deriveFont((float)10));
        jTextFieldNumberOfQPointsToAverage.setText(resourceMap.getString("jTextFieldNumberOfQPointsToAverage.text")); // NOI18N
        jTextFieldNumberOfQPointsToAverage.setName("jTextFieldNumberOfQPointsToAverage"); // NOI18N

        jTextFieldExponentAlphaOfPowerLaw.setFont(jTextFieldExponentAlphaOfPowerLaw.getFont().deriveFont((float)10));
        jTextFieldExponentAlphaOfPowerLaw.setText(resourceMap.getString("jTextFieldExponentAlphaOfPowerLaw.text")); // NOI18N
        jTextFieldExponentAlphaOfPowerLaw.setName("jTextFieldExponentAlphaOfPowerLaw"); // NOI18N

        jTextFieldMaximumQInDataFile.setFont(jTextFieldMaximumQInDataFile.getFont().deriveFont((float)10));
        jTextFieldMaximumQInDataFile.setText(resourceMap.getString("jTextFieldMaximumQInDataFile.text")); // NOI18N
        jTextFieldMaximumQInDataFile.setName("jTextFieldMaximumQInDataFile"); // NOI18N

        jTextFieldNumberOfLinesToSkip.setFont(jTextFieldNumberOfLinesToSkip.getFont().deriveFont((float)10));
        jTextFieldNumberOfLinesToSkip.setText(resourceMap.getString("jTextFieldNumberOfLinesToSkip.text")); // NOI18N
        jTextFieldNumberOfLinesToSkip.setName("jTextFieldNumberOfLinesToSkip"); // NOI18N

        jTextFieldScalingFactor.setFont(jTextFieldScalingFactor.getFont().deriveFont((float)10));
        jTextFieldScalingFactor.setText(resourceMap.getString("jTextFieldScalingFactor.text")); // NOI18N
        jTextFieldScalingFactor.setName("jTextFieldScalingFactor"); // NOI18N

        jLabel8.setFont(jLabel8.getFont().deriveFont((float)10));
        jLabel8.setText(resourceMap.getString("jLabel8.text")); // NOI18N
        jLabel8.setName("jLabel8"); // NOI18N

        jLabel9.setFont(jLabel9.getFont().deriveFont((float)10));
        jLabel9.setText(resourceMap.getString("jLabel9.text")); // NOI18N
        jLabel9.setName("jLabel9"); // NOI18N

        jLabel10.setFont(jLabel10.getFont().deriveFont((float)10));
        jLabel10.setText(resourceMap.getString("jLabel10.text")); // NOI18N
        jLabel10.setName("jLabel10"); // NOI18N

        jLabel11.setFont(jLabel11.getFont().deriveFont((float)10));
        jLabel11.setText(resourceMap.getString("jLabel11.text")); // NOI18N
        jLabel11.setName("jLabel11"); // NOI18N

        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jComboBackGround.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2", "3" }));
        jComboBackGround.setName("jComboBackGround"); // NOI18N
        jComboBackGround.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBackGroundActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel3)
                    .add(jLabelScattering)
                    .add(jLabel1)
                    .add(jLabel4)
                    .add(jLabel5)
                    .add(jLabel6)
                    .add(jLabel7))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jTextFieldNumberOfQPointsToAverage)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jTextFieldMaximumDistanceFopCalculation)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jTextFieldFixedRelErrOnTheFirstPoint)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jTextFieldMinimumQInDataFile, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE)
                            .add(jTextFieldExponentAlphaOfPowerLaw))
                        .add(81, 81, 81)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jLabel9)
                            .add(jLabel8)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel10)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel11))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(jComboBackGround, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(jTextFieldMaximumQInDataFile, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE)
                            .add(jTextFieldNumberOfLinesToSkip)
                            .add(jTextFieldScalingFactor)))
                    .add(jTextFieldDescription, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 349, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jTextFieldScatteringCurveFile, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 274, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jButton1)))
                .add(254, 254, 254))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(jTextFieldDescription, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jTextFieldScatteringCurveFile)
                        .add(jButton1, 0, 0, Short.MAX_VALUE))
                    .add(jLabelScattering))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel3)
                            .add(jTextFieldMinimumQInDataFile, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel4)
                            .add(jTextFieldFixedRelErrOnTheFirstPoint, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel5)
                            .add(jTextFieldMaximumDistanceFopCalculation, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel6)
                            .add(jTextFieldNumberOfQPointsToAverage, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel7)
                            .add(jTextFieldExponentAlphaOfPowerLaw, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel8)
                            .add(jTextFieldMaximumQInDataFile, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel9)
                            .add(jTextFieldNumberOfLinesToSkip, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel10)
                            .add(jTextFieldScalingFactor, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jComboBackGround, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel11))))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBackground(resourceMap.getColor("jPanel3.background")); // NOI18N
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel3.setName("jPanel3"); // NOI18N

        jCheckBoxCollimation.setFont(jCheckBoxCollimation.getFont().deriveFont((float)10));
        jCheckBoxCollimation.setText(resourceMap.getString("jCheckBoxCollimation.text")); // NOI18N
        jCheckBoxCollimation.setName("jCheckBoxCollimation"); // NOI18N
        jCheckBoxCollimation.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCheckBoxCollimationStateChanged(evt);
            }
        });
        jCheckBoxCollimation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxCollimationActionPerformed(evt);
            }
        });

        jTextFieldNumberOPointsForTheConvolution.setFont(jTextFieldNumberOPointsForTheConvolution.getFont().deriveFont((float)10));
        jTextFieldNumberOPointsForTheConvolution.setName("jTextFieldNumberOPointsForTheConvolution"); // NOI18N

        jTextFieldSourceSampleDistance.setFont(jTextFieldSourceSampleDistance.getFont().deriveFont((float)10));
        jTextFieldSourceSampleDistance.setText(resourceMap.getString("jTextFieldSourceSampleDistance.text")); // NOI18N
        jTextFieldSourceSampleDistance.setName("jTextFieldSourceSampleDistance"); // NOI18N

        jTextFieldWaveLengthAngs.setFont(jTextFieldWaveLengthAngs.getFont().deriveFont((float)10));
        jTextFieldWaveLengthAngs.setText(resourceMap.getString("jTextFieldWaveLengthAngs.text")); // NOI18N
        jTextFieldWaveLengthAngs.setName("jTextFieldWaveLengthAngs"); // NOI18N

        jLabel12.setFont(jLabel12.getFont().deriveFont((float)10));
        jLabel12.setText(resourceMap.getString("jLabel12.text")); // NOI18N
        jLabel12.setName("jLabel12"); // NOI18N

        jLabel13.setFont(jLabel13.getFont().deriveFont((float)10));
        jLabel13.setText(resourceMap.getString("jLabel13.text")); // NOI18N
        jLabel13.setName("jLabel13"); // NOI18N

        jLabel14.setFont(jLabel14.getFont().deriveFont((float)10));
        jLabel14.setText(resourceMap.getString("jLabel14.text")); // NOI18N
        jLabel14.setName("jLabel14"); // NOI18N

        jLabel15.setFont(jLabel15.getFont().deriveFont((float)10));
        jLabel15.setText(resourceMap.getString("jLabel15.text")); // NOI18N
        jLabel15.setName("jLabel15"); // NOI18N

        jLabel16.setFont(jLabel16.getFont().deriveFont((float)10));
        jLabel16.setText(resourceMap.getString("jLabel16.text")); // NOI18N
        jLabel16.setName("jLabel16"); // NOI18N

        jLabel17.setFont(jLabel17.getFont().deriveFont((float)10));
        jLabel17.setText(resourceMap.getString("jLabel17.text")); // NOI18N
        jLabel17.setName("jLabel17"); // NOI18N

        jTextFieldRadiusOftheSourceSlit.setFont(jTextFieldRadiusOftheSourceSlit.getFont().deriveFont((float)10));
        jTextFieldRadiusOftheSourceSlit.setText(resourceMap.getString("jTextFieldRadiusOftheSourceSlit.text")); // NOI18N
        jTextFieldRadiusOftheSourceSlit.setName("jTextFieldRadiusOftheSourceSlit"); // NOI18N

        jTextFieldSampleDetectorDistance.setFont(jTextFieldSampleDetectorDistance.getFont().deriveFont((float)10));
        jTextFieldSampleDetectorDistance.setText(resourceMap.getString("jTextFieldSampleDetectorDistance.text")); // NOI18N
        jTextFieldSampleDetectorDistance.setName("jTextFieldSampleDetectorDistance"); // NOI18N

        jTextFieldRadiusOfTheSampleSlit.setFont(jTextFieldRadiusOfTheSampleSlit.getFont().deriveFont((float)10));
        jTextFieldRadiusOfTheSampleSlit.setText(resourceMap.getString("jTextFieldRadiusOfTheSampleSlit.text")); // NOI18N
        jTextFieldRadiusOfTheSampleSlit.setName("jTextFieldRadiusOfTheSampleSlit"); // NOI18N

        jPanel4.setBackground(resourceMap.getColor("jPanel4.background")); // NOI18N
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("jPanel4.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, resourceMap.getFont("jPanel4.border.titleFont"))); // NOI18N
        jPanel4.setFont(jPanel4.getFont().deriveFont((float)10));
        jPanel4.setName("jPanel4"); // NOI18N

        jCheckBox_Mouve_Qpoints_in_the_error_bar.setFont(jCheckBox_Mouve_Qpoints_in_the_error_bar.getFont().deriveFont((float)10));
        jCheckBox_Mouve_Qpoints_in_the_error_bar.setText(resourceMap.getString("jCheckBox_Mouve_Qpoints_in_the_error_bar.text")); // NOI18N
        jCheckBox_Mouve_Qpoints_in_the_error_bar.setName("jCheckBox_Mouve_Qpoints_in_the_error_bar"); // NOI18N

        jCheckBoxWavelength_band.setFont(jCheckBoxWavelength_band.getFont().deriveFont((float)10));
        jCheckBoxWavelength_band.setText(resourceMap.getString("jCheckBoxWavelength_band.text")); // NOI18N
        jCheckBoxWavelength_band.setName("jCheckBoxWavelength_band"); // NOI18N
        jCheckBoxWavelength_band.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxWavelength_bandActionPerformed(evt);
            }
        });

        jCheckBoxDetector.setFont(jCheckBoxDetector.getFont().deriveFont((float)10));
        jCheckBoxDetector.setText(resourceMap.getString("jCheckBoxDetector.text")); // NOI18N
        jCheckBoxDetector.setName("jCheckBoxDetector"); // NOI18N
        jCheckBoxDetector.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCheckBoxDetectorStateChanged(evt);
            }
        });

        jCheckBoxRadialaverage.setFont(jCheckBoxRadialaverage.getFont().deriveFont((float)10));
        jCheckBoxRadialaverage.setText(resourceMap.getString("jCheckBoxRadialaverage.text")); // NOI18N
        jCheckBoxRadialaverage.setName("jCheckBoxRadialaverage"); // NOI18N
        jCheckBoxRadialaverage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxRadialaverageActionPerformed(evt);
            }
        });

        jCheckBoxVertical_Slit.setFont(jCheckBoxVertical_Slit.getFont().deriveFont((float)10));
        jCheckBoxVertical_Slit.setText(resourceMap.getString("jCheckBoxVertical_Slit.text")); // NOI18N
        jCheckBoxVertical_Slit.setName("jCheckBoxVertical_Slit"); // NOI18N
        jCheckBoxVertical_Slit.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCheckBoxVertical_SlitStateChanged(evt);
            }
        });

        jCheckBoxHorizontalSlit.setFont(jCheckBoxHorizontalSlit.getFont().deriveFont((float)10));
        jCheckBoxHorizontalSlit.setText(resourceMap.getString("jCheckBoxHorizontalSlit.text")); // NOI18N
        jCheckBoxHorizontalSlit.setName("jCheckBoxHorizontalSlit"); // NOI18N
        jCheckBoxHorizontalSlit.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCheckBoxHorizontalSlitStateChanged(evt);
            }
        });

        jLabel18.setFont(jLabel18.getFont().deriveFont((float)10));
        jLabel18.setText(resourceMap.getString("jLabel18.text")); // NOI18N
        jLabel18.setName("jLabel18"); // NOI18N

        jLabel19.setFont(jLabel19.getFont().deriveFont((float)10));
        jLabel19.setText(resourceMap.getString("jLabel19.text")); // NOI18N
        jLabel19.setName("jLabel19"); // NOI18N

        jLabel20.setFont(jLabel20.getFont().deriveFont((float)10));
        jLabel20.setText(resourceMap.getString("jLabel20.text")); // NOI18N
        jLabel20.setName("jLabel20"); // NOI18N

        jLabel21.setFont(jLabel21.getFont().deriveFont((float)10));
        jLabel21.setText(resourceMap.getString("jLabel21.text")); // NOI18N
        jLabel21.setName("jLabel21"); // NOI18N

        jTextFieldSpacialResolutionOfDetector.setFont(jTextFieldSpacialResolutionOfDetector.getFont().deriveFont((float)10));
        jTextFieldSpacialResolutionOfDetector.setText(resourceMap.getString("jTextFieldSpacialResolutionOfDetector.text")); // NOI18N
        jTextFieldSpacialResolutionOfDetector.setName("jTextFieldSpacialResolutionOfDetector"); // NOI18N

        jTextFieldQ1VerticalSlit.setFont(jTextFieldQ1VerticalSlit.getFont().deriveFont((float)10));
        jTextFieldQ1VerticalSlit.setText(resourceMap.getString("jTextFieldQ1VerticalSlit.text")); // NOI18N
        jTextFieldQ1VerticalSlit.setName("jTextFieldQ1VerticalSlit"); // NOI18N

        jTextFieldQ1HorizontalSlit.setFont(jTextFieldQ1HorizontalSlit.getFont().deriveFont((float)10));
        jTextFieldQ1HorizontalSlit.setText(resourceMap.getString("jTextFieldQ1HorizontalSlit.text")); // NOI18N
        jTextFieldQ1HorizontalSlit.setName("jTextFieldQ1HorizontalSlit"); // NOI18N

        jTextFieldWaveLenghtBandAngs.setFont(jTextFieldWaveLenghtBandAngs.getFont().deriveFont((float)10));
        jTextFieldWaveLenghtBandAngs.setText(resourceMap.getString("jTextFieldWaveLenghtBandAngs.text")); // NOI18N
        jTextFieldWaveLenghtBandAngs.setName("jTextFieldWaveLenghtBandAngs"); // NOI18N

        jLabel22.setFont(jLabel22.getFont().deriveFont((float)10));
        jLabel22.setText(resourceMap.getString("jLabel22.text")); // NOI18N
        jLabel22.setName("jLabel22"); // NOI18N

        jTextFieldQMaxVerticalSlit.setFont(jTextFieldQMaxVerticalSlit.getFont().deriveFont((float)10));
        jTextFieldQMaxVerticalSlit.setText(resourceMap.getString("jTextFieldQMaxVerticalSlit.text")); // NOI18N
        jTextFieldQMaxVerticalSlit.setName("jTextFieldQMaxVerticalSlit"); // NOI18N

        jLabel23.setFont(jLabel23.getFont().deriveFont((float)10));
        jLabel23.setText(resourceMap.getString("jLabel23.text")); // NOI18N
        jLabel23.setName("jLabel23"); // NOI18N

        jTextFieldQmaxHorizontalSlit.setFont(jTextFieldQmaxHorizontalSlit.getFont().deriveFont((float)10));
        jTextFieldQmaxHorizontalSlit.setText(resourceMap.getString("jTextFieldQmaxHorizontalSlit.text")); // NOI18N
        jTextFieldQmaxHorizontalSlit.setName("jTextFieldQmaxHorizontalSlit"); // NOI18N

        jLabel24.setFont(jLabel24.getFont().deriveFont((float)10));
        jLabel24.setText(resourceMap.getString("jLabel24.text")); // NOI18N
        jLabel24.setName("jLabel24"); // NOI18N

        jTextFieldSamplingForRadialAverage.setFont(jTextFieldSamplingForRadialAverage.getFont().deriveFont((float)10));
        jTextFieldSamplingForRadialAverage.setText(resourceMap.getString("jTextFieldSamplingForRadialAverage.text")); // NOI18N
        jTextFieldSamplingForRadialAverage.setName("jTextFieldSamplingForRadialAverage"); // NOI18N

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jCheckBox_Mouve_Qpoints_in_the_error_bar)
                    .add(jCheckBoxRadialaverage)
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel19)
                            .add(jLabel18)
                            .add(jLabel21)
                            .add(jLabel20))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jTextFieldQ1HorizontalSlit)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jTextFieldQ1VerticalSlit)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jTextFieldWaveLenghtBandAngs)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jTextFieldSpacialResolutionOfDetector, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 62, Short.MAX_VALUE))))
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(113, 113, 113)
                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jPanel4Layout.createSequentialGroup()
                                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jLabel24)
                                    .add(jLabel22))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                            .add(jLabel23))
                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(jTextFieldSamplingForRadialAverage, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                            .add(jTextFieldQmaxHorizontalSlit)
                            .add(jTextFieldQMaxVerticalSlit))
                        .add(41, 41, 41))
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(36, 36, 36)
                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jCheckBoxWavelength_band)
                            .add(jCheckBoxVertical_Slit))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 76, Short.MAX_VALUE)
                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jCheckBoxHorizontalSlit)
                            .add(jCheckBoxDetector))
                        .add(60, 60, 60))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel4Layout.createSequentialGroup()
                                .add(jCheckBox_Mouve_Qpoints_in_the_error_bar)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(jCheckBoxRadialaverage))
                            .add(jPanel4Layout.createSequentialGroup()
                                .add(jCheckBoxWavelength_band)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(jCheckBoxVertical_Slit)))
                        .add(30, 30, 30)
                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jTextFieldSpacialResolutionOfDetector, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel18)))
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(jCheckBoxDetector)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jCheckBoxHorizontalSlit)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jTextFieldQ1VerticalSlit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel19))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jTextFieldQ1HorizontalSlit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel20))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jTextFieldWaveLenghtBandAngs, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel21)))
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel22)
                            .add(jTextFieldQMaxVerticalSlit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jTextFieldQmaxHorizontalSlit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel23))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jTextFieldSamplingForRadialAverage, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel24))))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jCheckBoxCollimation))
                    .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel3Layout.createSequentialGroup()
                            .add(29, 29, 29)
                            .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel3Layout.createSequentialGroup()
                            .add(55, 55, 55)
                            .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(jLabel14)
                                .add(jLabel13)
                                .add(jLabel12))
                            .add(40, 40, 40)
                            .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                .add(jTextFieldSourceSampleDistance)
                                .add(jTextFieldWaveLengthAngs)
                                .add(jTextFieldNumberOPointsForTheConvolution, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 99, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                .add(jLabel15)
                                .add(jLabel16)
                                .add(jLabel17))
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(jTextFieldRadiusOfTheSampleSlit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(jTextFieldSampleDetectorDistance, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(jTextFieldRadiusOftheSourceSlit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(jCheckBoxCollimation)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel12)
                            .add(jTextFieldNumberOPointsForTheConvolution, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel13)
                            .add(jTextFieldSourceSampleDistance, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel14)
                            .add(jTextFieldWaveLengthAngs, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel15)
                            .add(jTextFieldRadiusOftheSourceSlit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel16)
                            .add(jTextFieldSampleDetectorDistance, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel17)
                            .add(jTextFieldRadiusOfTheSampleSlit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .add(8, 8, 8)
                .add(jPanel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        jButtonCancel.setText(resourceMap.getString("jButtonCancel.text")); // NOI18N
        jButtonCancel.setName("jButtonCancel"); // NOI18N
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        jbuttonOK.setText(resourceMap.getString("jbuttonOK.text")); // NOI18N
        jbuttonOK.setName("jbuttonOK"); // NOI18N
        jbuttonOK.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jbuttonOKMouseClicked(evt);
            }
        });
        jbuttonOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbuttonOKActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1, 0, 704, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(526, 526, 526)
                        .add(jbuttonOK)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButtonCancel))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(11, 11, 11)
                .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jbuttonOK)
                    .add(jButtonCancel))
                .add(40, 40, 40))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void jCheckBoxCollimationStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jCheckBoxCollimationStateChanged
   
}//GEN-LAST:event_jCheckBoxCollimationStateChanged

private void setVerticalSlitEnabled(boolean isSelected){
     this.jTextFieldQ1VerticalSlit.setEnabled(isSelected);
     this.jTextFieldQMaxVerticalSlit.setEnabled(isSelected);
}

private void setWaveLengthBand(boolean isSelected){
     this.jTextFieldWaveLenghtBandAngs.setEnabled(isSelected);
    
}

private void setSamplingRadialAverage(boolean isSelected){
     this.jTextFieldSamplingForRadialAverage.setEnabled(isSelected);
    
}

private void setHorizontalSlitEnabled(boolean isSelected){
     this.jTextFieldQ1HorizontalSlit.setEnabled(isSelected);
     this.jTextFieldQmaxHorizontalSlit.setEnabled(isSelected);
}

 private void setSpacialResolutionDetector(boolean selected) {
        this.jTextFieldSpacialResolutionOfDetector.setEnabled(selected);
    }

private void jCheckBoxVertical_SlitStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jCheckBoxVertical_SlitStateChanged
    this.setVerticalSlitEnabled(this.jCheckBoxVertical_Slit.isSelected());
}//GEN-LAST:event_jCheckBoxVertical_SlitStateChanged

private void jCheckBoxHorizontalSlitStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jCheckBoxHorizontalSlitStateChanged
    this.setHorizontalSlitEnabled(this.jCheckBoxHorizontalSlit.isSelected());
}//GEN-LAST:event_jCheckBoxHorizontalSlitStateChanged

private void jCheckBoxDetectorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jCheckBoxDetectorStateChanged
    this.jTextFieldSpacialResolutionOfDetector.setEnabled(this.jCheckBoxDetector.isSelected());
}//GEN-LAST:event_jCheckBoxDetectorStateChanged



private void jbuttonOKMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jbuttonOKMouseClicked
     //this.jTextFieldBackground.setText(singleExperiment.getParam("Flag Background"));
     this.singleExperiment.setParam("Description", this.jTextFieldDescription.getText());
    // this.singleExperiment.setParam("Experimental Scatering", this.jTextFieldScatteringCurveFile.getText());
     this.singleExperiment.setExperimentalScatteringCurve(this.jTextFieldScatteringCurveFile.getText());
     
     this.singleExperiment.setParam("Minimum Q in data file", this.jTextFieldMinimumQInDataFile.getText());
     this.singleExperiment.setParam("Maximum Q in data file", this.jTextFieldMaximumQInDataFile.getText());
     this.singleExperiment.setParam("Fixed rel.err. on the first point", this.jTextFieldFixedRelErrOnTheFirstPoint.getText());
     this.singleExperiment.setParam("Number of lines to skip", this.jTextFieldNumberOfLinesToSkip.getText());     
     this.singleExperiment.setParam("Maximum Distance for p(r) calculation", this.jTextFieldMaximumDistanceFopCalculation.getText());
     this.singleExperiment.setParam("Scaling Factor", this.jTextFieldScalingFactor.getText());     
     this.singleExperiment.setParam("Num. of Q-points to average", this.jTextFieldNumberOfQPointsToAverage.getText());
     this.singleExperiment.setParam("Flag Background", this.jComboBackGround.getSelectedItem().toString().trim());
     this.singleExperiment.setParam("Exponent alpha of power-law", this.jTextFieldExponentAlphaOfPowerLaw.getText());
     
     
     /** FLAGS **/
     if (this.jCheckBoxCollimation.isSelected()){
         this.singleExperiment.setParam("Collimation", "1");
     }
     else{
         this.singleExperiment.setParam("Collimation", "0");
     }
     
     if (this.jCheckBox_Mouve_Qpoints_in_the_error_bar.isSelected()){
         this.singleExperiment.setParam("Mouve Q-points", "1");
     }
     else{
         this.singleExperiment.setParam("Mouve Q-points", "0");
     }
     
     if (this.jCheckBoxWavelength_band.isSelected()){
         this.singleExperiment.setParam("Wavelength band", "1");
     }
     else{
         this.singleExperiment.setParam("Wavelength band", "0");
     }
     
     if (this.jCheckBoxDetector.isSelected()){
         this.singleExperiment.setParam("Flag Detector", "1");
     }
     else{
         this.singleExperiment.setParam("Flag Detector", "0");
     }
     
     if (this.jCheckBoxRadialaverage.isSelected()){
         this.singleExperiment.setParam("Flag Radial", "1");
     }
     else{
         this.singleExperiment.setParam("Flag Radial", "0");
     }
     
     if (this.jCheckBoxVertical_Slit.isSelected()){
         this.singleExperiment.setParam("Flag Vertical slit", "1");
     }
     else{
         this.singleExperiment.setParam("Flag Vertical slit", "0");
     }
     
     if (this.jCheckBoxHorizontalSlit.isSelected()){
         this.singleExperiment.setParam("Flag Horizontal slit", "1");
     }
     else{
         this.singleExperiment.setParam("Flag Horizontal slit", "0");
     }
          
     /** Collimation fields **/     
     this.singleExperiment.setParam("Number of points for the convolution", this.jTextFieldNumberOPointsForTheConvolution.getText());
     this.singleExperiment.setParam("Source-sample distance", this.jTextFieldSourceSampleDistance.getText());
     this.singleExperiment.setParam("Wavelength (Angs.)", this.jTextFieldWaveLengthAngs.getText());
     this.singleExperiment.setParam("Radius of the source slit", this.jTextFieldRadiusOftheSourceSlit.getText());
     this.singleExperiment.setParam("Radius of the sample slit", this.jTextFieldRadiusOfTheSampleSlit.getText());
     this.singleExperiment.setParam("Sample-detector distance", this.jTextFieldSampleDetectorDistance.getText());          
     
     /** Flags fields **/
     this.singleExperiment.setParam("Spacial resolution of detecto", this.jTextFieldSpacialResolutionOfDetector.getText());
     this.singleExperiment.setParam("Q1   vertical slit", this.jTextFieldQ1VerticalSlit.getText());
     this.singleExperiment.setParam("Q1   horizontal slit", this.jTextFieldQ1HorizontalSlit.getText());
     this.singleExperiment.setParam("Wavelength band (Angs.)", this.jTextFieldWaveLenghtBandAngs.getText());
     this.singleExperiment.setParam("Qmax vertical slit", this.jTextFieldQMaxVerticalSlit.getText());
     this.singleExperiment.setParam("Qmax horizontal slit", this.jTextFieldQmaxHorizontalSlit.getText());
     this.singleExperiment.setParam("Sampling for radial average", this.jTextFieldSamplingForRadialAverage.getText());
     
              
     this.genfitEvent.fire();
     this.setVisible(false);
}//GEN-LAST:event_jbuttonOKMouseClicked

    private void jbuttonOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbuttonOKActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jbuttonOKActionPerformed

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void jCheckBoxCollimationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxCollimationActionPerformed
        this.setCollimation(this.jCheckBoxCollimation.isSelected());
    }//GEN-LAST:event_jCheckBoxCollimationActionPerformed

    private void jCheckBoxWavelength_bandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxWavelength_bandActionPerformed
        this.jTextFieldWaveLenghtBandAngs.setEnabled(this.jCheckBoxWavelength_band.isSelected());
    }//GEN-LAST:event_jCheckBoxWavelength_bandActionPerformed

    private void jCheckBoxRadialaverageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxRadialaverageActionPerformed
        this.jTextFieldSamplingForRadialAverage.setEnabled(this.jCheckBoxRadialaverage.isSelected());
    }//GEN-LAST:event_jCheckBoxRadialaverageActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        SelectFileJDialog select = new SelectFileJDialog(null, true);
        select.setEvent(GenfitEventType.SCATERING_FILE_SELECTED);
        select.genfitEvent.addListener(this);
        select.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

private void jComboBackGroundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBackGroundActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_jComboBackGroundActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SingleExperimentJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SingleExperimentJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SingleExperimentJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SingleExperimentJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                SingleExperimentJDialog dialog = new SingleExperimentJDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    
    
    public void setCollimation(boolean collimationFlag){
       
        this.jTextFieldNumberOPointsForTheConvolution.setEnabled(collimationFlag);
        this.jTextFieldSourceSampleDistance.setEnabled(collimationFlag);
        this.jTextFieldWaveLengthAngs.setEnabled(collimationFlag);
        this.jTextFieldRadiusOftheSourceSlit.setEnabled(collimationFlag);
        this.jTextFieldSampleDetectorDistance.setEnabled(collimationFlag);
        this.jTextFieldRadiusOfTheSampleSlit.setEnabled(collimationFlag);
        //this.jCheckBox_Mouve_Qpoints_in_the_error_bar.setEnabled(collimationFlag);
        this.jCheckBoxRadialaverage.setEnabled(collimationFlag);
        this.jCheckBoxWavelength_band.setEnabled(collimationFlag);
        
        this.jCheckBoxDetector.setEnabled(collimationFlag);                
        this.jTextFieldSpacialResolutionOfDetector.setEnabled(collimationFlag);        
        this.jTextFieldWaveLenghtBandAngs.setEnabled(collimationFlag);
                                
        this.jCheckBoxVertical_Slit.setEnabled(collimationFlag);
        this.jTextFieldQ1VerticalSlit.setEnabled(collimationFlag);
        this.jTextFieldQMaxVerticalSlit.setEnabled(collimationFlag);
                
        /** Horizontal Slit **/
        this.jCheckBoxHorizontalSlit.setEnabled(collimationFlag);
        this.jTextFieldQ1HorizontalSlit.setEnabled(collimationFlag);
        this.jTextFieldQmaxHorizontalSlit.setEnabled(collimationFlag);
        
        
        this.jCheckBoxWavelength_band.setEnabled(collimationFlag);
        this.jCheckBoxRadialaverage.setEnabled(collimationFlag);
        this.jCheckBoxDetector.setEnabled(collimationFlag);
        
        this.jTextFieldSamplingForRadialAverage.setEnabled(collimationFlag);
        if (collimationFlag){
            this.setVerticalSlitEnabled(this.jCheckBoxVertical_Slit.isSelected());
            this.setHorizontalSlitEnabled(this.jCheckBoxHorizontalSlit.isSelected());
            this.setWaveLengthBand(this.jCheckBoxWavelength_band.isSelected());
            this.setSamplingRadialAverage(this.jCheckBoxRadialaverage.isSelected());
            this.setSpacialResolutionDetector(this.jCheckBoxDetector.isSelected());
        } 
    }
    
    
    public void setSingleExperiment(SingleExperiment singleExperiment){
        
        
        this.singleExperiment = singleExperiment;
        this.jTextFieldDescription.setText(singleExperiment.getDescription());
        this.jTextFieldScatteringCurveFile.setText(singleExperiment.getExperimentalScatteringCurve());
        
        
        this.jTextFieldMinimumQInDataFile.setText(singleExperiment.getParam("Minimum Q in data file"));
        this.jTextFieldMaximumQInDataFile.setText(singleExperiment.getParam("Maximum Q in data file"));
        this.jTextFieldFixedRelErrOnTheFirstPoint.setText(singleExperiment.getParam("Fixed rel.err. on the first point"));
        this.jTextFieldMaximumDistanceFopCalculation.setText(singleExperiment.getParam("Maximum Distance for p(r) calculation"));
        this.jTextFieldNumberOfQPointsToAverage.setText(singleExperiment.getParam("Num. of Q-points to average"));
        this.jTextFieldExponentAlphaOfPowerLaw.setText(singleExperiment.getParam("Exponent alpha of power-law"));
        
        this.jTextFieldMaximumQInDataFile.setText(singleExperiment.getParam("Maximum Q in data file"));
        this.jTextFieldNumberOfLinesToSkip.setText(singleExperiment.getParam("Number of lines to skip"));
        this.jTextFieldScalingFactor.setText(singleExperiment.getParam("Scaling Factor"));
//        this.jTextFieldBackground.setText(singleExperiment.getParam("Flag Background"));
        this.jComboBackGround.setSelectedItem(singleExperiment.getParam("Flag Background"));
    
        /** Collimation panel **/
        this.jTextFieldNumberOPointsForTheConvolution.setText(singleExperiment.getParam("Number of points for the convolution"));
        this.jTextFieldSourceSampleDistance.setText(singleExperiment.getParam("Source-sample distance"));
        this.jTextFieldWaveLengthAngs.setText(singleExperiment.getParam("Wavelength (Angs.)"));
        this.jTextFieldRadiusOftheSourceSlit.setText(singleExperiment.getParam("Radius of the source slit"));
        this.jTextFieldRadiusOfTheSampleSlit.setText(singleExperiment.getParam("Radius of the sample slit"));
        this.jTextFieldSampleDetectorDistance.setText(singleExperiment.getParam("Sample-detector distance"));
        
        
         /** FLAGS **/
        boolean verticalSlit = singleExperiment.getBooleanParam("Flag Vertical slit");
        boolean horizontalSlit = singleExperiment.getBooleanParam("Flag Horizontal slit");
        
        this.jCheckBoxCollimation.setSelected(singleExperiment.getBooleanParam("Collimation"));
        this.jCheckBox_Mouve_Qpoints_in_the_error_bar.setSelected(singleExperiment.getBooleanParam("Mouve Q-points in the error bar"));
        this.jCheckBoxRadialaverage.setSelected(singleExperiment.getBooleanParam("Radial average"));
        this.jCheckBoxWavelength_band.setSelected(singleExperiment.getBooleanParam("Flag Wavelength band"));
        this.jCheckBoxVertical_Slit.setSelected(verticalSlit);
        this.jCheckBoxHorizontalSlit.setSelected(horizontalSlit);
    
        
        boolean collimation = singleExperiment.getBooleanParam("Collimation");
        
        
        
        boolean wavelengthBandFlag = singleExperiment.getBooleanParam("Flag Wavelength band");
        this.jCheckBoxWavelength_band.setSelected(wavelengthBandFlag);
        
        
        boolean radialAverageBandFlag = singleExperiment.getBooleanParam("Flag Radial");
        this.jCheckBoxRadialaverage.setSelected(radialAverageBandFlag);
        
        boolean detetorFlag = singleExperiment.getBooleanParam("Flag Detector");
        this.jCheckBoxDetector.setSelected(detetorFlag);
         /** Vertical Slit **/
        //this.setVerticalSlitEnabled(singleExperiment.getBooleanParam("Flag Vertical slit"));
        if (collimation){
            this.setVerticalSlitEnabled(verticalSlit);
            this.setHorizontalSlitEnabled(horizontalSlit);
            this.setWaveLengthBand(wavelengthBandFlag);
            this.setSamplingRadialAverage(radialAverageBandFlag);
            this.setSpacialResolutionDetector(detetorFlag);
            
        }
        
        
        
        this.jTextFieldSpacialResolutionOfDetector.setText(singleExperiment.getParam("Spacial resolution of detecto"));
        this.jTextFieldQ1VerticalSlit.setText(singleExperiment.getParam("Q1   vertical slit"));
        this.jTextFieldQ1HorizontalSlit.setText(singleExperiment.getParam("Q1   horizontal slit"));
        this.jTextFieldWaveLenghtBandAngs.setText(singleExperiment.getParam("Wavelength band (Angs.)"));
    
        this.jTextFieldQMaxVerticalSlit.setText(singleExperiment.getParam("Qmax vertical slit"));
        this.jTextFieldQmaxHorizontalSlit.setText(singleExperiment.getParam("Qmax horizontal slit"));
        this.jTextFieldSamplingForRadialAverage.setText(singleExperiment.getParam("Sampling for radial average"));
        
        this.setCollimation(collimation);
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JCheckBox jCheckBoxCollimation;
    private javax.swing.JCheckBox jCheckBoxDetector;
    private javax.swing.JCheckBox jCheckBoxHorizontalSlit;
    private javax.swing.JCheckBox jCheckBoxRadialaverage;
    private javax.swing.JCheckBox jCheckBoxVertical_Slit;
    private javax.swing.JCheckBox jCheckBoxWavelength_band;
    private javax.swing.JCheckBox jCheckBox_Mouve_Qpoints_in_the_error_bar;
    private javax.swing.JComboBox jComboBackGround;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelScattering;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JTextField jTextFieldDescription;
    private javax.swing.JTextField jTextFieldExponentAlphaOfPowerLaw;
    private javax.swing.JTextField jTextFieldFixedRelErrOnTheFirstPoint;
    private javax.swing.JTextField jTextFieldMaximumDistanceFopCalculation;
    private javax.swing.JTextField jTextFieldMaximumQInDataFile;
    private javax.swing.JTextField jTextFieldMinimumQInDataFile;
    private javax.swing.JTextField jTextFieldNumberOPointsForTheConvolution;
    private javax.swing.JTextField jTextFieldNumberOfLinesToSkip;
    private javax.swing.JTextField jTextFieldNumberOfQPointsToAverage;
    private javax.swing.JTextField jTextFieldQ1HorizontalSlit;
    private javax.swing.JTextField jTextFieldQ1VerticalSlit;
    private javax.swing.JTextField jTextFieldQMaxVerticalSlit;
    private javax.swing.JTextField jTextFieldQmaxHorizontalSlit;
    private javax.swing.JTextField jTextFieldRadiusOfTheSampleSlit;
    private javax.swing.JTextField jTextFieldRadiusOftheSourceSlit;
    private javax.swing.JTextField jTextFieldSampleDetectorDistance;
    private javax.swing.JTextField jTextFieldSamplingForRadialAverage;
    private javax.swing.JTextField jTextFieldScalingFactor;
    private javax.swing.JTextField jTextFieldScatteringCurveFile;
    private javax.swing.JTextField jTextFieldSourceSampleDistance;
    private javax.swing.JTextField jTextFieldSpacialResolutionOfDetector;
    private javax.swing.JTextField jTextFieldWaveLenghtBandAngs;
    private javax.swing.JTextField jTextFieldWaveLengthAngs;
    private javax.swing.JButton jbuttonOK;
    // End of variables declaration//GEN-END:variables

    public void handleGenfitEvent(GenfitEvent e) {
          switch (e.getType()) {
            /*case OUTPUT_FOLDER_SELECTED:
                this.jTextFieldOutputFolder.setText(e.filePath);
                break;*/
            case SCATERING_FILE_SELECTED:
                this.jTextFieldScatteringCurveFile.setText(e.filePath);
                break;
            
            default:
                break;

        }     
    }

   
}
